built-in 

  baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:45674' })

  handles the low-level details of sending requests and handling responses using the Fetch API

  baseQuery: represents the foundation for making HTTP requests to an API in RTK Query

    within the baseQuery, RTK Query provided three built-in query function:

      fetchBaseQuery: uses the fetch function to make HTTP requests. It is commonly used for making requests to RESTful APIs.

      axiosBaseQuery: uses the Axios library to make HTTP requests. Axios provides additional features such as request/response interceptors, cancellation, and more.

      graphqlBaseQuery: This base query function is specifically designed for making requests to GraphQL APIs. It handles sending GraphQL queries, mutations, and subscriptions and supports features like caching and normalization.



        export const apiSlice = createApi({
          baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:45674' }),
          tagTypes: ['Blog', 'User'],
          endpoints: builder => ({})
        })

========================================================================================================

custom 

  flexibility to use any networking library or approach of your choice to handle HTTP requests and responses

    const baseQuery = createBaseQuery({ 
      baseUrl: 'http://localhost:45674',
      called before each request is made
      prepareHeaders: (headers, { getState }) => {
        // Add any custom headers or authentication tokens here
        const token = getState().auth.token;
        if (token) {
          headers.set('Authorization', `Bearer ${token}`);
        }
        headers.set('Content-Type', 'application/json');
      },
      // You can also customize other options, such as error handling, response parsing, etc.
    });

    const apiSlice = createApi({
      baseQuery,
      tagTypes: ['Blog', 'User'],
      endpoints: (builder) => ({
        // Define your endpoints here
      }),
    });