import { createSelector, createEntityAdapter } from "@reduxjs/toolkit"
import { apiSlice } from "../../app/api/apiSlice"

const usersAdapter = createEntityAdapter({})

const initialState = usersAdapter.getInitialState()

export const usersApiSlice = apiSlice.injectEndpoints({
  endpoints: builder => ({
    getUsers: builder.query({
      query: () => '/users',
      validateStatus: (response, result) => {
        return response.status === 200 && !result.isError
      },
      // specifies that unused data will be retained for 5 seconds.
      keepUnusedDataFor: 5,
      transformResponse: responseData => {
        const loadedUsers = responseData.map(user => {
          user.id = user._id
          return user
        })
        // setAll(currentState,replace the currentState)
        return usersAdapter.setAll(initialState, loadedUsers)
      },
      providesTags: (result, error, arg) => {
        console.log(result)
        if (result?.ids) {
          return [
            { type: 'User', id: 'LIST' },
            ...result.ids.map(id => ({ type: 'User', id }))
          ]
        } else return [{ type: 'User', id: 'LIST' }]
      }
    })
  })
})

export const {
  //  hook generated by the API slice, providing access to the 
  useGetUsersQuery
} = usersApiSlice


// selector function retrieves the result of the getUsers endpoint query from the Redux store

// if the getUsers query has been executed and completed successfully, it returns an object with the following properties:

// data: The data received from the API response.
// status: The status of the query, such as 'fulfilled' for a successful request.
// error: If an error occurred during the query, this property will hold the error object.
// If the getUsers query is still in progress or has not been executed yet, the selector will return an object with the following properties:

// data: undefined or the previously fetched data if available.
// status: The status of the query, such as 'pending' or 'idle'.
// error: undefined.

// gets the query result data
export const selectUsersResult = usersApiSlice.endpoints.getUsers.select()
console.log('selectUsersResult', selectUsersResult)


// If the inputs remain the same between consecutive calls, the selector will return the cached result instead of recomputing it
// access the extracted data property from the usersResult object in your Redux-connected components.
//  The selector will only recalculate its value if the selectUsersResult result changes
const selectUsersData = createSelector(
  selectUsersResult,
  usersResult => usersResult.data
)
console.log('selectUsersData', selectUsersData)

export const {
  selectAll: selectAllUsers,
  selectById: selectById,
  selectIds: selectUserIds
  // The state argument passed to the selectUsersData selector represents the current state of the Redux store. 
  // It is provided automatically by the Redux store when the selector is called. 
  // The state argument allows the selector to access the relevant data from the Redux store,
  //  in this case, the usersResult object.
} = usersAdapter.getSelectors(state => selectUsersData(state) ?? initialState)

console.log(usersAdapter.getSelectors(state))